// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;
    static Array memoryBottom;

    static int heapBottom;//16384
    static int heapBase;//2048

    static int length;//the segment's length
    static int next;//pointer to the next segment in the list
    static int ALLOC_LENGTH; //the alloc block's length
    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let heapBase = 2048;
        let heapBottom = 16384;
        let memory = 0;
        let length = 0;
        let next =1;
        let freeList = heapBase;
        let freeList[length] = heapBottom-heapBase;
        let freeList[next] = null;
        let ALLOC_LENGTH = -1;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    function Array FirstFist(int size){
         var Array curBlock, bestBlock;
        var int bestSize,curSize;

        let bestBlock = null;//init null
        
        let curBlock = freeList;

        if(curBlock[next] = null){
            return curBlock;
        }

        while(~(curBlock = null)){

            let curSize = curBlock[length] - 1; //alloced block only need one header

            if(~(curSize < size)){

                let bestBlock = curBlock;
            }

            let curBlock = curBlock[next];
        }

        return bestBlock;
    }
    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function Array alloc(int size) {
        var Array bestBlock;
        var int remainingSize;
        var Array allocatedBlock;
        
        // Step 1: Find the best fitting block using bestFit
        let bestBlock = Memory.FirstFist(size);

        // If no block is found that fits, return null (or -1)
        if (bestBlock = null) {
            return null;
        }

        // Step 2: Calculate the remaining size after allocation
        let remainingSize = bestBlock[length] - size - 1;  // Subtract 1 for the header

        // Step 3: If the remaining size is large enough to create a new free block, split the block
        if (~(remainingSize < 0)) {
            // Step 3.1: Update the bestBlock size to the allocated size
            let bestBlock[length] = size;  // Update the size of the allocated block

            // Step 3.2: Create a new free block with the remaining memory
            let freeList = bestBlock + size + 1;  // Move past the allocated block

            // Update the freeList to reflect the new free block
            let freeList[length] = remainingSize;  // Set the size of the new free block
            let freeList[next] = bestBlock[next];  // Link to the next free block in the list
            let bestBlock[next] = freeList;  // Update the current block to point to the new free block
        } else {
            // Step 3.3: If there's no remaining space, use the entire block
            let bestBlock[next] = null;  // Mark the end of the freeList
        }

        // Step 4: Mark the allocated block's size in the header (size + 1 to store the size)
        let allocatedBlock = bestBlock + 1;  // Skip the header to the allocated block
        do Memory.poke(allocatedBlock - 1, size + 1);  // Store the size of the allocated block

        // Step 5: Return the address of the allocated block (not including the header)
        return allocatedBlock;
    }


    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
   function void deAlloc(Array o) {
    var Array segment;
    var int blockSize;  
    let segment = o - 1;
    let blockSize = Memory.peek(segment);
    let segment[length] = blockSize - 1;
    let segment[next] = freeList;
    let freeList = segment;
    return;
}


    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int maxSize;
        var int currentSize;

        // Iterate over the array of memory blocks
        var int i;
        let i =0;
        let maxSize = 0;
        while (i < o[length]) {
            // Access the size of the block (the cell before the block contains the size)
            let currentSize = Memory.peek(o[i] - 1);  // Assuming Memory.peek returns the value at a given address

            // If the current block is larger than the current maximum, update maxSize
            if (currentSize > maxSize) {
               let maxSize = currentSize;
            }

           let i = i + 1;
        }

        // Return the maximum size found
        return maxSize;    
    }
}
