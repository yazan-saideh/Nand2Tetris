// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */

class Screen {
    static Array screen;
    static int start_pixel;
    static int end_pixel;
    static boolean screen_color;
    static Array twoToLst;
    /** Initializes the Screen. */
    function void init() {
        var int rows,cols;
        let screen = 16384;
        let screen_color = true;
        let start_pixel = 16384;
        let end_pixel = 24575;
        let twoToLst = Array.new(16);
		let twoToLst[0] = 1;
		let twoToLst[1] = 2;
		let twoToLst[2] = 4;
		let twoToLst[3] = 8;
		let twoToLst[4] = 16;
		let twoToLst[5] = 32;
		let twoToLst[6] = 64;
		let twoToLst[7] = 128;
		let twoToLst[8] = 256;
		let twoToLst[9] = 512;
		let twoToLst[10] = 1024;
		let twoToLst[11] = 2048;
		let twoToLst[12] = 4096;
		let twoToLst[13] = 8192;
		let twoToLst[14] = 16384;
		let twoToLst[15] = 16384+16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
        *    Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let screen_color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        // For this function, you will need to calculate the value x%16.
        // It should be calculated quickly without using multiplication or
        // division, using exactly one basic math/logical operation.
        // In addition, calculating 16384 + y * 32 + x/16 should not use
        // division or multiplication.
        // Pseudocode:
        // 1. Compute the RAM address where the (x,y) pixel is
        //    represented: 16384 + (32*y) + (x/16).
        // 2. Use Memory.peek to get the 16-bit value of this address
        // 3. Use some bitwise operation to set (only) the bit that corresponds
        //    to the pixel to the current color.
        // 4. Use Memory.poke to write the modified 16-bit value to the RAM
        // address.
        var int reminder;
        var int address;
        var int value;
        var int bit;
        var int mask;
        var int yshifted;
        var int xshifted;
        var int i;
        let i =0;
        let yshifted = Math.multiply(y, 32);
        let xshifted = Math.divide(x,16);
       
        let start_pixel = 16384;
        let end_pixel = 24575;
        let address = start_pixel + yshifted + xshifted;
        let value = Memory.peek(address);
        let mask = twoToLst[x & 15];
        
        if (screen_color) {
            let value = value | mask;
        } 
        else {
        let value = value & ~mask;
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        // The case where x1 != x2 and y1 != y2 should be implemented without
        // multiplication or division.
        // Pseudocode:
        // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
        // 2. Compute dx and dy
        // 3. while ((a <= dx) and (b <= dy))
        // 4.   do drawPixel(x+a, y+b)
        // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
        // 6.   else          { let b=b+1, diff=diff-dx }
        //
        // The case where y1 == y2 can be implemented efficiently by
        // trying to draw as many pixels as possible in a single assignment,
        // similarly to Fill in project 4.
        var int x,y,a,b,diff,dx,dy,xstep,ystep,xaxis,yaxis;
        let x = x1;
        let y = y1;
        let a = 0;
        let b = 0;
        let xaxis = 0;
        let yaxis = 0;
        let xstep = 1;
        let ystep = 1;
        let dx = x2-x1;
        let dy = y2 - y1;
        let diff = 0;
        if(dx < 0){
            let dx = -dx;
            let xstep = -1;

        }
        if(dy < 0){
            let dy = -dy;
            let ystep = -1;
        }
        if (dy = 0) {
            while (~(a > dx)) {
                do Screen.drawPixel(x+xaxis, y);
                let xaxis = xaxis + xstep;
                let a = a + 1;
            }
            return;
        }

// Special case: vertical line
        if (dx = 0) {
            while (~(b > dy)) {
                do Screen.drawPixel(x, y+yaxis);
                let yaxis = yaxis + ystep;
                let b = b + 1;
            }
            return;
        }
        while((~(a > dx)) &(~(b>dy))){
            do Screen.drawPixel( x+xaxis ,y+yaxis );
            if(diff<0){
                let xaxis = xaxis + xstep;
                let a = a+1;
                let diff = diff+dy;
            }
            else{
                let yaxis = yaxis + ystep;
                let b = b+1;
                let diff = diff-dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
        * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int current_Y;
        let current_Y = x1;
        while(~(current_Y> x2)){
            do Screen.drawLine(current_Y,y1,current_Y,y2);
            let current_Y = current_Y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        // This can be implemented efficiently by drawing multiple lines at
        // each iteration. You can use multiplication and sqrt.
        // Pseudocode:
        // 1. for (dy = -r ... r)
        // 2.   let halfWidth = sqrt(r*r - dy*dy)
        // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)
        var int dy, halfWidth, dxSquared, dySquared, radiusSquared;
        let radiusSquared = Math.multiply(r,r);
        let dy = -r;
        while (~(dy > r)) {
            let dySquared = Math.multiply(dy,dy);
            let halfWidth = Math.sqrt(radiusSquared - dySquared);
            do Screen.drawLine(x - halfWidth, y + dy, x + halfWidth, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
