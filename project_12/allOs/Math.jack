// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        /** Initializes the library. */
        function void init() {
            return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if(x < 0){
                return -x;
            }
            return x;
        }


        function boolean bit(int x, int i){
            var int counter;
            var int temp;
            var int result;
    
            let temp = x;
            while(i > 0){
                let temp = #temp;
                let i = i - 1;
            }
            let result = 1 & temp;
            if (~(result = 0)) {
                return true;
            }
            return false;
        }
        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx   
            // 7. return sum
            var int sum;
            var int shiftedx;
            var int i;
            var bool temp;
    
            let sum = 0;
            let i = 0;
            let shiftedx = x;

            while(i < 16){
                let temp = Math.bit(y,i);
                if(temp = true){
                    let sum = sum + shiftedx;
                }
                let shiftedx = shiftedx + shiftedx;
                let i = i+1;
            }
            return sum;

        }

        function int shiftleft_i_times(int x , int i){
            var int temp;
            let temp = x;
            while(i>0){
                let temp = ^(temp);
                let i = i - 1;
            }
            return temp;
        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int q;
            var bool isneg;
            var int i;
            var int two_q_y;
            var int temp;

            if ((x < 0) & (y > 0)) {
                let isneg = true;
            }
            if ((x > 0) & (y < 0)) {
                let isneg = true;
            }

            let x = Math.abs(x);
            let y = Math.abs(y);

            if (y > x) {
                return 0;
            }
            if ((y > x) | (y < 0)) {
                return 0;
            }

            let q = Math.divide(x, y + y);
            let two_q_y = y; 

            let i = 0;
            let two_q_y = 0;
            while (i < q) {
                let two_q_y = two_q_y + y; 
                let i = i + 1;
            }
            let two_q_y = two_q_y + two_q_y; 

            if ((x - two_q_y) < y) {
                let q = q + q; 
            } else {
                let q = q + q + 1; 
            }
            if (isneg) {
                return -q;
            }
            return q;
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y

            var int y;
            var int j;
            var int power;
            var int candidateSquared;
            var int i;
            var int temp;

            let y = 0;

            let j = 7; 

            while (j > -1) {
                let power = Math.shiftleft_i_times(1,j);

                let i = 0;
                let candidateSquared = 0;
                while(i < (y+power)){
                    let candidateSquared = candidateSquared + (y + power);
                    let i = i + 1;
                }

                if( (candidateSquared < x) | (candidateSquared = x)) {
                    if(candidateSquared > 0){
                        let y = y + power; 
                    }
                }
                let j = j - 1;
            }
            return y;
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if(a>b){
                return a;
            }
            return b;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if(a>b){
                return b;
            }
            return a;
        }
}
