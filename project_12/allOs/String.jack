// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int str_len;
    field int str_max_len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength =0){
            let maxLength = 1;
        }
        let str_len = 0;
        let str_max_len = maxLength;
        let str = Array.new(str_max_len);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return str_len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(str_len < str_max_len){
            let str[str_len] = c;
            let str_len = str_len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (str_len > 0){
            let str_len = str_len - 1;
        }
        return;
    }

    /** helper function that returns:
    * true: if char is a number
    * false: if char is a character/symbol/other */
    function boolean is_number(char c){
        return ~(c < 47) & ~(c > 57);
    }

    function int intVal_of(char c){
        return c - 48;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var int val;
        var int i;
        var int d;
        var bool is_neg;

        let val = 0;
        let i = 0;
        let is_neg = false;

        if( (str_len > 0) & (str[i] = 45) ) {
            let is_neg = true;
            let i = 1;
        }

        while ( (i < str_max_len) & (String.is_number(str[i])) ) {
            let d = String.intVal_of(str[i]);
            let val = (val*10) + d;
            let i = i + 1;
        }

        if(is_neg){
            return -val;
        }
        return val;
        
    }

    function char int_to_string(int d){
        return d + 48;
    }

    function int modulo(int num, int devisor){
        var int temp;
        let temp = num / devisor;
        return (num - (temp*devisor));
    }

    method void setInthelper(int val){
        var int lastDigit;
        var int next;
        var char c;

        let lastDigit = String.modulo(val,10);
        if(val < 10){
            let c = String.int_to_string(lastDigit);
            do appendChar(c);
        }
        else{
            let next = val/10;
            do setInthelper(next);
            do appendChar(String.int_to_string(lastDigit));
        }
        return;
    }


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        let str_len = 0;   
        
        if( val < 0 ) {
            let val = -val;
            do appendChar(45);     
        }
        
        do setInthelper(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
