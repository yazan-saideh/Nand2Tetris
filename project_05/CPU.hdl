// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
         Not(in=instruction[15] , out=notinstruction );
    Mux16(a=instruction , b=ALUout , sel=instruction[15] , out=muxout );
    Or(a=notinstruction , b=instruction[5] , out=loada );// create a load for the A register
    And(a=instruction[15] , b=instruction[12] , out=sel );//ceck if the last bit is A or C instruction
    And(a=instruction[15] , b=instruction[4] , out=dload );// create a load for the A register
    ARegister(in=muxout , load=loada , out=Aregister,out[0..14]=addressM );
    Mux16(a=Aregister , b=inM , sel=sel , out=muxout2 );
    DRegister(in=ALUout , load=dload , out=Dregister );

    //ceck if the ALU inputs are C-instructions
    And(a=instruction[15] , b=instruction[11] , out=zx );
    And(a=instruction[15] , b=instruction[10] , out=nx );
    Or(a=notinstruction , b=instruction[9] , out=zy );
    Or(a=notinstruction , b=instruction[8] , out=ny );
    And(a=instruction[15] , b=instruction[7] , out=f );
    And(a=instruction[15] , b=instruction[6] , out=no );
    //ALU out >=  0
    Or(a=zr,b=ng,out=notpos); 
    Not(in=notpos , out=pos ); 
    And(a=instruction[15] , b=instruction[3] , out=writeM );

    //check for which type of jump to make (out < 0 , out == out,.....)
    And(a=instruction[0],b=pos,out=j3);
    And(a=instruction[1],b=zr,out=j2);
    And(a=instruction[2],b=ng,out=j1);

    Or(a=j1,b=j2,out=j12);
    Or(a=j12,b=j3,out=j123);

    And(a=j123,b=instruction[15],out=jump);


    PC(in=Aregister,load=jump,reset=reset,inc=true,out[0..14]=pc);
    ALU(x=Dregister , y=muxout2 , zx=zx , nx=nx , zy=zy ,
     ny=ny , f=f, no=no , out=outM,out = ALUout , zr=zr , ng=ng );
}