// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
// same code as CPU chip but replaced ALU with Extended ALU chip
Not(in=instruction[15] , out=notinstruction );
    Mux16(a=instruction , b=ALUout , sel=instruction[15] , out=muxout );
    Or(a=notinstruction , b=instruction[5] , out=loada );
    And(a=instruction[15] , b=instruction[12] , out=sel );
    And(a=instruction[15] , b=instruction[4] , out=dload );
    ARegister(in=muxout , load=loada , out=Aregister,out[0..14]=addressM );
    Mux16(a=Aregister , b=inM , sel=sel , out=muxout2 );
    DRegister(in=ALUout , load=dload , out=Dregister );


    And(a=instruction[15] , b=instruction[11] , out=zx );
    And(a=instruction[15] , b=instruction[10] , out=nx );
    Or(a=notinstruction , b=instruction[9] , out=zy );
    Or(a=notinstruction , b=instruction[8] , out=ny );
    And(a=instruction[15] , b=instruction[7] , out=f );
    And(a=instruction[15] , b=instruction[6] , out=no );
    Or(a=zr,b=ng,out=notpos); 
    Not(in=notpos , out=pos ); 
    And(a=instruction[15] , b=instruction[3] , out=writeM );
ExtendAlu(x=Dregister , y=muxout2 , instruction = instruction[6..14],out = ALUout,out = outM , zr=zr , ng=ng );



And(a=instruction[0],b=pos,out=j3);
    And(a=instruction[1],b=zr,out=j2);
    And(a=instruction[2],b=ng,out=j1);

    Or(a=j1,b=j2,out=j12);
    Or(a=j12,b=j3,out=j123);

    And(a=j123,b=instruction[15],out=jump);


     
    PC(in=Aregister,load=jump,reset=reset,inc=true,out[0..14]=pc);


     
}
